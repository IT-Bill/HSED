# #bin/bash
# strexpression="${1}"
# start=${2}
# end=${3}
# make
# bin/errordetect.exe "${strexpression}"
# echo '-------MPFR high-precision version code generation-------'
# cd detectModule
# make
# bin/errorDetect.exe ${start} ${end}
# cd ..


#!/bin/bash

# Define the benchmark data
expressions=(
    "1.0 + 0.5 * x - 0.125 * x * x + 0.0625 * x * x * x - 0.0390625 * x * x * x * x"
    "1.0 / (sqrt(x + 1.0) + sqrt(x))"
    "(exp(x) - 1.0) / x"
    "(exp(x) - 1.0) / log(exp(x))"
    "exp(x) - 1.0"
    "log(x + 1.0) - log(x)"
    "1.0 / x - 1.0 / tan(x)"
    "(1.0 - cos(x)) / (x * x)"
    "exp(x) / (exp(x) - 1.0)"
    "(x - sin(x)) / (x - tan(x))"
    "exp(x) - 2.0 + exp(-x)"
    "(4.0 * x) / (x / 1.11 + 1.0)"
    "(4.0 * x * x) / (1 + x / 1.11 + x / 1.11)"
    "log(exp(x) - 1.0)"
    "x - (x * x * x) / 6.0 + (x * x * x * x * x) / 120.0 - (x * x * x * x * x * x * x) / 5040.0"
    "((35000000.0 + ((0.401 * (1000.0 / x)) * (1000.0 / x))) * (x - (1000.0 * 4.27e-5))) - ((1.3806503e-23 * 1000.0) * 300.0)"
    "(1.0 - cos(x)) / (x * x)"
    "(((x + 1.0) * log(x + 1.0)) - (x * log(x))) - 1.0"
    "cbrt(x + 1) - cbrt(x)"
    "((1.0 / (x + 1.0)) - (2.0 / x)) + (1.0 / (x - 1.0))"
    "1.0/(x+1) - (1.0/x)"
    "1.0/sqrt(x) - 1.0 / sqrt(x+1)"
    "1.0 / tan(x + 1) - 1.0 / tan(x)"
    "(1.0 - cos(x)) / sin(x)"
    "sqrt(x + 1) - sqrt(x)"
    "(x - 1) / (x * x - 1)"
    "1.0 / (x + 1.0)"
    "x / ( x + 1)"
    "(0.954929658551372 * x) - (0.12900613773279798 * ((x * x) * x))"
    "(-x * x * x) / 6.0"
    "log(1 - x) / log(1 + x)"
    "log((1 - x) / (1 + x))"
)

# Corresponding ranges for each expression
ranges=(
    "[0,1]"
    "[1,1000]"
    "[0.01,0.5]"
    "[0.01,0.5]"
    "[0.01,100]"
    "[0.01,100]"
    "[0.01,100]"
    "[0.01,100]"
    "[0.01,100]"
    "[0.01,100]"
    "[0.01,100]"
    "[0.1,0.3]"
    "[0.1,0.3]"
    "[0.01,8]"
    "[-1.57079632679,1.57079632679]"
    "[0.1,0.5]"
    "[0.01,100]"
    "[0.01,100]"
    "[0.01,100]"
    "[0.01,100]"
    "[0.01,100]"
    "[0.01,100]"
    "[0.01,100]"
    "[0.01,100]"
    "[0, 100]"
    "[1.00001,2]"
    "[1.00001,2]"
    "[1,999]"
    "[-2,2]"
    "[0,1]"
    "[0.001,1]"
    "[0.001,1]"
)

values=(
    0.9475234968115063
    103.68859100345894
    0.3342790007593655
    0.36534634232531554
    97.56112670897302
    88.31255340572132
    0.9793465733528137
    0.8244193792338986
    2.4048254489914176
    3.831706047056457
    0.8935769796371544
    0.1664539873600014
    0.10962360352277824
    2.970269441606363
    0.0007856072043063286
    0.3441417515276926
    4.994081974033955
    1.1206881999963783
    0.3644760251045227
    0.15179780125604148
    0.009997479617586999
    45.531135559046504
    5.7634615898112465
    70.68583679192113
    56.53097915645881
    1.7241344451904297
    0.9997580647470014
    2.438684225081374
    0.25082916021350016
    0.9997032284731101
    0.014895903877911704
    0.003309994935991548
)

# # Output file
# output="result.txt"

# # Loop through expressions and values
# for i in "${!expressions[@]}"; do
#     strexpression="${expressions[$i]}"
#     value="${values[$i]}"
    
#     # Run make command
#     make

#     # Run bin/errordetect.exe with the expression
#     bin/errordetect.exe "${strexpression}"

#     # Log output
#     echo "-------MPFR high-precision version code generation-------" >> "$output"
#     echo "Expression: ${strexpression}, \nValue: ${value}" >> "$output"

#     # Change directory and run errorDetect.exe with the value
#     cd detectModule
#     make
#     bin/errorDetect.exe ${value} >> "../$output"
#     cd ..
    
# done

# echo "All expressions processed and results saved in result.txt."

# Output file
output="result.txt"

# Loop through expressions and ranges
for i in "${!expressions[@]}"; do
    strexpression="${expressions[$i]}"
    range="${ranges[$i]}"
    
    # Parse the range
    start=$(echo $range | cut -d ',' -f 1 | tr -d '[]')
    end=$(echo $range | cut -d ',' -f 2 | tr -d '[]')

    # Run make command
    make

    # Run bin/errordetect.exe with the expression
    bin/errordetect.exe "${strexpression}"

    # Log output
    # echo "-------MPFR high-precision version code generation-------" >> "$output"
    echo "Expression: ${strexpression}, Range: [${start}, ${end}]" >> "$output"

    # Change directory and run errorDetect.exe
    cd detectModule
    make
    bin/errorDetect.exe ${i} ${start} ${end} >> "../$output"
    cd ..
    
done

echo "All expressions processed and results saved in result.txt."
